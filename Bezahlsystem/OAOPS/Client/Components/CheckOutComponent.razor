@using Blazored.LocalStorage;
@using OAOPS.Client.Services;
@attribute [Authorize]
@inject AuthenticationStateProvider GetAuthenticationStateAsync
<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.ShoppingCartCheckout"/>
            Warenkorb
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudSimpleTable Style="overflow-x: auto;">
            <tbody>
                @foreach (var item in Cart)
                {
                    <tr>
                        <td>@item.Name</td>
                        <td>@item.PriceAmount</td>
                        <td><MudIconButton Icon="@Icons.Filled.Add" Color="Color.Primary" OnClick="(() => AddArticle(item))" /></td>
                        <td>@item.Amount</td>
                        <td><MudIconButton Icon="@Icons.Filled.Remove" Color="Color.Primary" OnClick="(() => RemoveArticle(item))" /></td>
                    </tr>
                }
                <tr>
                    <td>Gesamtpreis:</td>
                    <td>@TotalSum</td>
                </tr>
            </tbody>
        </MudSimpleTable>
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Abbrechen</MudButton>
        <MudButton Color="Color.Primary" OnClick="Pay">Bezahlen</MudButton>
    </DialogActions>
</MudDialog>

@code{
    [Inject]
    public ISnackbar Snackbar { get; set; }

    [Inject] 
    public ILocalStorageService localStorage { get; set; }

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Inject]
    public IDataService dataService { get; set; }

    [Parameter]
    public List<ArticleDto> Cart { get; set; } = new();

    public double TotalSum { get; set; } = 0;

    private void Cancel()
    {
        MudDialog?.Cancel();
    }

    private async void Pay()
    {
        var authState = await GetAuthenticationStateAsync.GetAuthenticationStateAsync();
        var userName = authState.User.Identity.Name;
        if (userName == null)
        {
            Snackbar.Add("Nicht angemeldet", Severity.Error);
            return;
        }
        var res = dataService.Pay(Cart, userName);

        Snackbar.Add("Bezahlt", Severity.Success);
        MudDialog.Close(DialogResult.Ok("success"));
    }

    async void AddArticle(ArticleDto article)
    {
        var fArt = Cart.FirstOrDefault(x => x.Name == article.Name);
        if (fArt != null) fArt.Amount++;
        else
        {
            var tmpArticle = new ArticleDto()
                {
                    Name = article.Name,
                    Amount = 1,
                    PriceAmount = article.PriceAmount
                };

            Cart.Add(tmpArticle);

            await localStorage.SetItemAsync("Cart", Cart);
        }
        SetTotalAmount();
        await InvokeAsync(StateHasChanged);
    }

    private void SetTotalAmount()
    {
        double totalAmount = 0;

        foreach (var item in Cart)
        {
            totalAmount += item.Amount * item.PriceAmount;
        }

        TotalSum = Math.Round(totalAmount, 1);
    }

    async void RemoveArticle(ArticleDto article)
    {
        var fArt = Cart.FirstOrDefault(x => x.Name == article.Name);
        if (fArt != null)
        {
            if (fArt.Amount > 1) fArt.Amount--;
            else if (fArt.Amount <= 1) Cart.Remove(fArt);
        }

        await localStorage.SetItemAsync("Cart", Cart);
        SetTotalAmount();
        await InvokeAsync(StateHasChanged);
    }
}