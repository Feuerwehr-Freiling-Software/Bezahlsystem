@page "/manage/Articles"
@using OAOPS.Client.Components.AddComponents;
@using OAOPS.Client.Services;
@using System.Text;
@attribute [Authorize(Roles = "Admin")]

<PageTitle>Artikel Management</PageTitle>

<MudGrid Justify="Justify.Center" Class="mt-5">
    <MudItem xs="10">
        <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Add" OnClick="CreateArticle">Artikel Hinzufügen</MudButton>
        <MudTextField Label="Artikelname" @bind-Value="ArticleNameFilter" DebounceInterval="500" Variant="Variant.Filled" FullWidth="false" Class="align-self-start mt-5" />

        <MudPaper>
            <MudDataGrid SortMode="SortMode.Multiple"
                         Dense="true"
                         ServerData="LoadData"
                         Context="Articles"
                         Outlined="true"
                         Class="pa-2 flex-grow-1 mt-5 mb-5"
                         RowClassFunc="RowClass"
                         @bind-SelectedItem="SelectedArticle"
                         FilterDefinitions="FilterDefinitions"
                         Height="100%"
                         Style="height: 50%"
                         FixedHeader="true"
                         Virtualize="true"
                         OverscanCount="5"
                         @ref="DataGrid">
                <Columns>
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="Name" Title="Artikelname" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="PriceAmount" Title="Preis" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="QuantityActual" Title="Anzahl" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="QuantityAtStart" Title="Anzahl beim Erstellen" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="MinAmount" Title="Min. Anzahl für Nachricht" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="Category" Title="Kategorie" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="StorageName" Title="Name des Storages" />
                    <Column HeaderClass="datagrid-header" CellClass="px-auto" T="ArticleDto" Field="StorageSlot" Title="Name des Slots" />
                    <Column HeaderClass="datagrid-header" T="ArticleDto" CellClass="d-flex justify-end" Title="Aktion" Sortable="false">
                        <CellTemplate>
                            <MudIconButton Size="@Size.Small" Color="Color.Primary" Icon="@Icons.Material.Outlined.Delete" OnClick="@(() => DeleteArticle(context.Item))" />
                            <MudIconButton Size="@Size.Small" Color=Color.Primary Icon="@Icons.Material.Outlined.Edit" OnClick="@(() => UpdateArticle(context.Item))" />
                        </CellTemplate>
                    </Column>
                </Columns>
                <LoadingContent>
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                </LoadingContent>
                <NoRecordsContent>
                    <MudText Typo="Typo.h6">Es gibt aktuell keine Artikel</MudText>
                </NoRecordsContent>
                <PagerContent>
                    <MudDataGridPager T="ArticleDto" InfoFormat="{first_item}-{last_item} / {all_items}" PageSizeOptions="@(new int[]{ 15, 25, 50, 100 })" />
                </PagerContent>
            </MudDataGrid>
        </MudPaper>
    </MudItem>
</MudGrid>

@code{
    [Inject]
    public IDataService DataService { get; set; }

    [Inject]
    public IDialogService DialogService { get; set; }

    public MudDataGrid<ArticleDto> DataGrid { get; set; } = new();
    public List<FilterDefinition<ArticleDto>> FilterDefinitions { get; set; } 
    private string _articleNameFilter = "";

    public string ArticleNameFilter
    {
        get { return _articleNameFilter; }
        set
        {
            _articleNameFilter = value;
            DataGrid?.ReloadServerData();
        }
    }

    protected override void OnInitialized()
    {
        FilterDefinitions = new List<FilterDefinition<ArticleDto>>
        {
            new FilterDefinition<ArticleDto>()
            {
                FilterFunction = OrderNumberFilterFunction
            }
        };
    }

    protected bool OrderNumberFilterFunction(ArticleDto article)
            => String.IsNullOrEmpty(ArticleNameFilter) || article.Name.Contains(ArticleNameFilter);

    public ArticleDto SelectedArticle { get; set; } = new();

    protected string RowClass(ArticleDto article, int idx)
    {
        StringBuilder classes = new();
        if (article == SelectedArticle)
        {
            classes.Append(" mud-info");
        }

        return classes.ToString();
    }

    protected async Task CreateArticle()
    {
        var opt = new DialogOptions()
            {
                CloseButton = true,
                MaxWidth = MaxWidth.Medium
            };

        var dialog = await DialogService.ShowAsync<AddArticleComponent>("Artikel Hinzufügen", opt);
        var res = await dialog.Result;

        await InvokeAsync(StateHasChanged);
    }

    protected async Task UpdateArticle(ArticleDto article)
    {

    }

    protected async Task DeleteArticle(ArticleDto article)
    {
        
    }

    protected async Task<GridData<ArticleDto>> LoadData(GridState<ArticleDto> gridState)
    {
        var articles = await DataService.GetArticlesFiltered(articleName: ArticleNameFilter, page: gridState.Page, pageSize: gridState.PageSize) ?? new();
        return new GridData<ArticleDto>()
            {
                Items = articles,
                TotalItems = articles.Count
            };
    }
}