@page "/register"

@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using Paymentsystem.Shared.ViewModels;

@inject HttpClient http
@inject NavigationManager nav

<EditForm Model="@model" OnValidSubmit="OnValidSubmit">
    <DataAnnotationsValidator />
    <MudGrid Justify="Justify.Center" Style="width:100%; margin-top: 100px">
        <MudItem xs="11" sm="7">
            @if (showErrorAlert)
            {
                <MudAlert ShowCloseIcon="true" CloseIconClicked="CloseAlert" Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">@errorText</MudAlert>
            }
        </MudItem>
        <MudItem xs="12" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;" 
                            Label="Benutzername" HelperText="Max. 14 Zeichen"
                                  @bind-Value="model.Username" For="@(() => model.Username)" RequiredError="Benutzername ist notwendig."/>
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;"
                            Label="Email" Class="mt-3"
                                  Validation="@(new EmailAddressAttribute() {ErrorMessage = "Emailadresse ist ungültig"})"  @bind-Value="model.Email" For="@(() => model.Email)" RequiredError="Emailadresse ist notwendig." />
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;"
                            Label="Vorname" Class="mt-3" @bind-Value="model.FirstName"/>
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;"
                                  Label="Nachname" Class="mt-3" @bind-Value="model.LastName" />
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;" 
                            Label="Passwort" HelperText="Passwort eingeben" Class="mt-3"
                                  Validation="@(new Func<string, IEnumerable<string>>(PasswordStrength))"  @bind-Value="model.Password" For="@(() => model.Password)" InputType="InputType.Password" RequiredError="Passwort ist notwendig." />
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;" 
                            Label="Passwort wiederholen" HelperText="Passwort wiederholen" Class="mt-3"
                                  Validation="@(new Func<string, string>(PasswordMatch))" @bind-Value="model.Password2" For="@(() => model.Password2)" InputType="InputType.Password" RequiredError="Passwort wiederholen." />
                </MudCardContent>
                <MudCardActions>
                    <MudLink Href="/login">Du hast schon einen Account?</MudLink>
                    <MudSpacer/>
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Register</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    RegisterAccountForm model = new RegisterAccountForm();

    private string errorText = string.Empty;
    private bool showErrorAlert = false;

    public class RegisterAccountForm
    {
        [Required(ErrorMessage = "Benutzername fehlt")]
        [StringLength(14, ErrorMessage = "Die Namenslänge darf nicht länger als 14 sein.", MinimumLength = 3)]
        public string Username { get; set; }

        [Required(ErrorMessage = "Emailadresse fehlt")]
        [EmailAddress(ErrorMessage = "Der eingegebene Wert is keine gültige Email.")]
        public string Email { get; set; }

        [Required(ErrorMessage = "Vorname fehlt.")]
        public string FirstName { get; set; }

        [Required(ErrorMessage = "Nachname fehlt.")]
        public string LastName { get; set; }

        [Required(ErrorMessage = "Passwort fehlt")]
        [StringLength(30, ErrorMessage = "Das Passwort muss mindestens 8 Zeichen lang sein.", MinimumLength = 8)]
        public string Password { get; set; }

        [Required(ErrorMessage = "Passwort muss bestätigt werden.")]
        public string Password2 { get; set; }

    }

    private void CloseAlert()
    {
        errorText = string.Empty;
        showErrorAlert = false;
    }

    private async Task OnValidSubmit(EditContext context)
    {
        var userDto = new UserDto()
        {
            Password = model.Password,
            Username = model.Username,
            Email = model.Email,
            FirstName = model.FirstName,
            LastName = model.LastName
        };

        var res = await http.PostAsJsonAsync<UserDto>("https://localhost:7237/api/Auth/Register", userDto);
        if (!res.IsSuccessStatusCode)
        {
            errorText = await res.Content.ReadAsStringAsync();
            showErrorAlert = true;
            InvokeAsync(StateHasChanged);
            return;
        }

        nav.NavigateTo("/login");
    }

    private IEnumerable<string> PasswordStrength(string pw)
    {
        if (string.IsNullOrWhiteSpace(pw))
        {
            yield return "Passwort wird benötigt!";
            yield break;
        }

        if (pw.Length < 8)
            yield return "Das Passwort muss mindestens die Länge 8 haben";
        if (!Regex.IsMatch(pw, @"[A-Z]"))
            yield return "Das Passwort muss mindestens einen Großbuchstaben enthalten";
        if (!Regex.IsMatch(pw, @"[a-z]"))
            yield return "Das Passwort muss mindestens einen Kleinbuchstaben enthalten";
        if (!Regex.IsMatch(pw, @"[^a-zA-Z\d:]"))
            yield return "Das Passwort muss mindestens ein Sonderzeichen enthalten";
    }

    private string PasswordMatch(string arg)
    {
        if (model.Password != arg)
            return "Passwörter stimmen nicht überein";
        return null;
    }

}