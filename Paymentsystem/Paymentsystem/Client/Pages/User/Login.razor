@page "/login"
@using Paymentsystem.Shared.ViewModels;
@using System.ComponentModel.DataAnnotations;

@inject ILocalStorageService LocalStorage
@inject NavigationManager _nav
@inject AuthenticationStateProvider provider
@inject HttpClient http

<EditForm Model="@User" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    
    <MudGrid Justify="Justify.Center" Style="width: 100%; margin-top: 10%">
        <MudItem xs="11" sm="7">
            @if (showErrorAlert)
            {
                <MudAlert ShowCloseIcon="true" CloseIconClicked="CloseAlert" Severity="Severity.Error" ContentAlignment="HorizontalAlignment.Center">@errorText</MudAlert>
            }
        </MudItem>
        <MudItem xs="11" sm="7">
            <MudCard>
                <MudCardContent>
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;"
                                  Label="Benutzername" HelperText="Max. 14 Zeichen"
                                  @bind-Value="User.Username" For="@(() => User.Username)" RequiredError="Benutzername ist notwendig." />
                    <MudTextField Style="background: var(--mud-palette-background); color: var(--mud-palette-TextPrimary); border-radius: 3px;"
                                  Label="Passwort" HelperText="Passwort eingeben" Class="mt-3"
                                  @bind-Value="User.Password" For="@(() => User.Password)" InputType="InputType.Password" RequiredError="Passwort ist notwendig." />
                </MudCardContent>
                <MudCardActions>
                    <MudLink Href="/register">Du hast noch keinen Account?</MudLink>
                    <MudSpacer />
                    <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">Login</MudButton>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</EditForm>

@code {
    private LoginDto User = new ();
    private string errorText = string.Empty;
    private bool showErrorAlert = false;


    class LoginDto
    {
        [Required(ErrorMessage = "Benutzername fehlt")]
        [StringLength(14, ErrorMessage = "Die Namenslänge muss {2} sein und darf nicht länger als {1} sein.", MinimumLength = 3)]
        public string Username { get; set; }

        [Required(ErrorMessage = "Passwort fehlt")]
        [StringLength(30, ErrorMessage = "Das Passwort muss mindestens 8 Zeichen lang sein.", MinimumLength = 4)]
        public string Password { get; set; }
    }

    private void CloseAlert()
    {
        errorText = string.Empty;
        showErrorAlert = false;
    }

    async void HandleLogin()
    {        
        var res = await http.PostAsJsonAsync("https://localhost:7237/api/Auth/Login", User);
        if (!res.IsSuccessStatusCode)
        {
            errorText = await res.Content.ReadAsStringAsync();
            showErrorAlert = true;
            InvokeAsync(StateHasChanged);
            return;
        }

        var token = await res.Content.ReadAsStringAsync();
        await LocalStorage.SetItemAsStringAsync("username", User.Username);
        await LocalStorage.SetItemAsync<string>("token", token);
        await provider.GetAuthenticationStateAsync();
        _nav.NavigateTo("");
    }
}
