@inherits LayoutComponentBase
@inject ILocalStorageService localStorage

<CustomThemeProvider @ref="_mudThemeProvider" @bind-IsDarkMode="DarkMode"/>
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar>
        <MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
        Bezahlsystem

        <MudSpacer />
        <MudToggleIconButton Style="right: 0" Toggled="DarkMode" ToggledChanged="OnToggledChanged"
                             Icon="@Icons.Material.Filled.LightMode" Color="Color.Inherit" Title="DarkMode aktivieren"
                             ToggledIcon="@Icons.Material.Filled.DarkMode" ToggledColor="Color.Inherit" ToggledTitle="Lightmode aktivieren" />
    </MudAppBar>
    <MudDrawer @bind-Open="@_drawerOpen" Variant="DrawerVariant.Temporary" Elevation="1">
        <NavMenu/>
    </MudDrawer>
    <MudMainContent>
        @Body
    </MudMainContent>
</MudLayout>

@code {
    bool _drawerOpen = true;

    public bool DarkMode { get; set; }

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    public async void OnToggledChanged(bool toggled)
    {
        DarkMode = toggled;
        await localStorage.SetItemAsync("darkMode", toggled);
    }

    private CustomThemeProvider? _mudThemeProvider;

    protected override void OnInitialized()
    {
        StateHasChanged();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        bool? darkMode = await localStorage.GetItemAsync<bool>("darkMode");

        if (darkMode != null)
        {
            DarkMode = (bool)darkMode;
        }

        if (firstRender && _mudThemeProvider != null && darkMode == null)
        {
            DarkMode = await _mudThemeProvider.GetSystemPreference();            
            StateHasChanged();
        }

    }
}